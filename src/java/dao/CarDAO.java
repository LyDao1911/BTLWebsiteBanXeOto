/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dao;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Car;
import model.CarImage;
import model.CarStock;
import model.Brand;
import java.util.Map;
import java.util.LinkedHashMap;

/**
 *
 * @author Hong Ly
 */
public class CarDAO {

    private static final Logger LOGGER = Logger.getLogger(CarDAO.class.getName());

    public int insertCarAndStock(Car car, CarStock stock) {

        // Query cho b·∫£ng car (Kh·ªõp v·ªõi model Car.java)
        String carQuery = "INSERT INTO car (CarName, BrandID, Price, Color, Description, Status) VALUES (?, ?, ?, ?, ?, ?)";

        // Query cho b·∫£ng carstock (Kh·ªõp v·ªõi model CarStock.java)
        String stockQuery = "INSERT INTO carstock (BrandID, CarID, Quantity, LastUpdated) VALUES (?, ?, ?, ?)";

        int generatedCarId = -1;
        Connection con = null;

        try {
            con = Connect.getCon();
            // B·∫Øt ƒë·∫ßu Transaction
            con.setAutoCommit(false);

            // 1. Ch√®n v√†o b·∫£ng 'car'
            try (PreparedStatement carPs = con.prepareStatement(carQuery, Statement.RETURN_GENERATED_KEYS)) {
                carPs.setString(1, car.getCarName());
                carPs.setInt(2, car.getBrandID());
                carPs.setBigDecimal(3, car.getPrice());
                carPs.setString(4, car.getColor());
                carPs.setString(5, car.getDescription());
                carPs.setString(6, car.getStatus());

                carPs.executeUpdate();

                // L·∫•y CarID t·ª± tƒÉng
                try (ResultSet rs = carPs.getGeneratedKeys()) {
                    if (rs.next()) {
                        generatedCarId = rs.getInt(1);
                    }
                }
            }

            // 2. Ch√®n v√†o b·∫£ng 'carstock' (Ch·ªâ th·ª±c hi·ªán n·∫øu l·∫•y ƒë∆∞·ª£c CarID)
            if (generatedCarId != -1) {
                try (PreparedStatement stockPs = con.prepareStatement(stockQuery)) {
                    stockPs.setInt(1, car.getBrandID()); // L·∫•y BrandID t·ª´ ƒë·ªëi t∆∞·ª£ng Car
                    stockPs.setInt(2, generatedCarId); // D√πng CarID v·ª´a t·∫°o
                    stockPs.setInt(3, stock.getQuantity());
                    stockPs.setTimestamp(4, Timestamp.valueOf(stock.getLastUpdated())); // Chuy·ªÉn LocalDateTime sang Timestamp

                    stockPs.executeUpdate();
                }
            } else {
                // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c CarID, h·ªßy b·ªè
                throw new Exception("Kh√¥ng th·ªÉ t·∫°o CarID m·ªõi.");
            }

            // Commit transaction n·∫øu c·∫£ hai l·ªánh INSERT ƒë·ªÅu th√†nh c√¥ng
            con.commit();
            return generatedCarId;

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi th√™m xe v√† stock. Ti·∫øn h√†nh Rollback.", e);
            if (con != null) {
                try {
                    con.rollback(); // Ho√†n t√°c n·∫øu c√≥ l·ªói
                } catch (Exception rbEx) {
                    LOGGER.log(Level.SEVERE, "L·ªói khi rollback.", rbEx);
                }
            }
            return -1; // Th√™m th·∫•t b·∫°i
        } finally {
            if (con != null) {
                try {
                    con.setAutoCommit(true); // Tr·∫£ l·∫°i ch·∫ø ƒë·ªô AutoCommit
                    con.close();
                } catch (Exception closeEx) {
                    LOGGER.log(Level.SEVERE, "L·ªói khi ƒë√≥ng k·∫øt n·ªëi.", closeEx);
                }
            }
        }
    }

    /**
     * Ph∆∞∆°ng th·ª©c ch√®n ƒë·ªëi t∆∞·ª£ng CarImage v√†o b·∫£ng 'carimage'.
     *
     * @param image ƒê·ªëi t∆∞·ª£ng CarImage (ch·ª©a CarID, ImageURL, IsMain)
     * @return true n·∫øu ch√®n th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
     */
    public boolean insertCarImage(CarImage image) {
        // Query kh·ªõp v·ªõi model CarImage.java
        String query = "INSERT INTO carimage (CarID, ImageURL, IsMain) VALUES (?, ?, ?)";

        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(query)) {

            ps.setInt(1, image.getCarID());
// (L∆∞u √Ω: T√™n c·ªôt trong DB c·ªßa c·∫≠u l√† ImageURL hay ImagePath? T·ªõ d√πng ImageURL kh·ªõp v·ªõi model)
            ps.setString(2, image.getImageURL());
            ps.setBoolean(3, image.isIsMain()); // D√πng getter isIsMain()

            return ps.executeUpdate() > 0;

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi ch√®n ·∫£nh m√¥ t·∫£ cho CarID: " + image.getCarID(), e);
            return false;
        }
    }

    public List<Car> getAllCarsWithStock() {
        List<Car> list = new ArrayList<>();
        String query = "SELECT c.CarID, c.CarName, c.BrandID, c.Price, c.Color, "
                + "c.Description, c.Status, s.Quantity "
                + "FROM car c "
                + "LEFT JOIN carstock s ON c.CarID = s.CarID";

        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(query); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                Car car = new Car();
                car.setCarID(rs.getInt("CarID"));
                car.setCarName(rs.getString("CarName"));
                car.setBrandID(rs.getInt("BrandID"));
                car.setPrice(rs.getBigDecimal("Price"));
                car.setColor(rs.getString("Color"));
                car.setDescription(rs.getString("Description"));
                car.setStatus(rs.getString("Status"));

                // L·∫•y th√™m Quantity
                int quantity = rs.getInt("Quantity");
                car.setQuantity(quantity);

                list.add(car);
            }

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi l·∫•y danh s√°ch xe c√≥ t·ªìn kho.", e);
        }

        return list;
    }

    // Trong CarDAO.java
    public Car getCarById(int carId) {
        // K·∫æT H·ª¢P: L·∫•y th√¥ng tin xe, t·ªìn kho, t√™n h√£ng v√† URL ·∫£nh ch√≠nh trong 1 QUERY
        String sql = "SELECT c.CarID, c.CarName, c.Price, c.Color, c.Description, c.Status, "
                + "s.Quantity, " // L·∫•y t·ªìn kho
                + "b.BrandName, b.BrandID, " // L·∫•y t√™n v√† ID h√£ng xe
                + "ci.ImageURL AS MainImageURL " // L·∫•y ·∫£nh ch√≠nh
                + "FROM car c "
                + "LEFT JOIN carstock s ON c.CarID = s.CarID "
                + "JOIN brand b ON c.BrandID = b.BrandID " // D√πng JOIN thay v√¨ ch·ªâ l·∫•y BrandID
                + "LEFT JOIN carimage ci ON c.CarID = ci.CarID AND ci.IsMain = 1 "
                + "WHERE c.CarID = ?";

        Car car = null;
        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, carId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    car = new Car();
                    car.setCarID(rs.getInt("CarID"));
                    car.setCarName(rs.getString("CarName"));
                    // C·∫¨P NH·∫¨T: G√°n BrandName
                    car.setBrandID(rs.getInt("BrandID"));
                    car.setBrandName(rs.getString("BrandName"));
                    // ---
                    car.setPrice(rs.getBigDecimal("Price"));
                    car.setColor(rs.getString("Color"));
                    car.setDescription(rs.getString("Description"));
                    car.setStatus(rs.getString("Status"));
                    car.setQuantity(rs.getInt("Quantity"));
                    // C·∫¨P NH·∫¨T: G√°n MainImageURL (ƒë√£ c√≥ trong query JOIN)
                    String mainImage = rs.getString("MainImageURL");
                    if (mainImage != null && !mainImage.startsWith("uploads/")) {
                        mainImage = mainImage;
                    }
                    car.setMainImageURL(mainImage);
                }
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi l·∫•y chi ti·∫øt xe CarID: " + carId, e);
        }
        // B·ªè kh·ªëi finally r∆∞·ªùm r√† v√¨ try-with-resources ƒë√£ t·ª± ƒë√≥ng connection

        return car;
    }

    // // üîπ C·∫≠p nh·∫≠t th√¥ng tin xe, t·ªìn kho, v√† ·∫£nh
    public boolean updateCarWithStock(Car car, int quantity) {
        System.out.println(">>> [DAO] ƒêang c·∫≠p nh·∫≠t xe: " + car.getCarID() + " - " + car.getCarName());
        System.out.println(">>> [DAO] S·ªë l∆∞·ª£ng t·ªìn: " + quantity);

        String carQuery = "UPDATE car SET CarName=?, BrandID=?, Price=?, Color=?, Description=?, Status=? WHERE CarID=?";

        // S·ª¨A L·ªñI 1: Thay GETDATE() b·∫±ng NOW() cho MySQL/H·ªó tr·ª£ chung
        String stockQuery = "UPDATE carstock SET Quantity=?, LastUpdated=NOW() WHERE CarID=?";
        String insertStock = "INSERT INTO carstock (BrandID, CarID, Quantity, LastUpdated) VALUES (?, ?, ?, NOW())";

        String imageMainQuery = "UPDATE carimage SET ImageURL=? WHERE CarID=? AND IsMain=1";
        // Query INSERT ·∫£nh ch√≠nh n·∫øu UPDATE th·∫•t b·∫°i (ƒê√£ th√™m bi·∫øn m·ªõi)
        String insertMainImage = "INSERT INTO carimage (CarID, ImageURL, IsMain) VALUES (?, ?, 1)";

        String deleteThumbsQuery = "DELETE FROM carimage WHERE CarID=? AND IsMain=0";
        String insertThumbQuery = "INSERT INTO carimage (CarID, ImageURL, IsMain) VALUES (?, ?, 0)";

        Connection con = null;

        try {
            con = Connect.getCon();
            con.setAutoCommit(false);

            // üü¢ 1. C·∫≠p nh·∫≠t th√¥ng tin xe
            int carRows = 0;
            try (PreparedStatement carPs = con.prepareStatement(carQuery)) {
                carPs.setString(1, car.getCarName());
                carPs.setInt(2, car.getBrandID());
                carPs.setBigDecimal(3, car.getPrice());
                carPs.setString(4, car.getColor());
                carPs.setString(5, car.getDescription());
                carPs.setString(6, car.getStatus());
                carPs.setInt(7, car.getCarID());
                carRows = carPs.executeUpdate();
                System.out.println(">>> [DAO] C·∫≠p nh·∫≠t b·∫£ng car: " + carRows + " d√≤ng.");

                // N·∫æU carRows == 0 th√¨ CarID kh√¥ng t·ªìn t·∫°i, c·∫ßn ROLLBACK ngay
                if (carRows == 0) {
                    throw new Exception("L·ªói: Kh√¥ng t√¨m th·∫•y CarID=" + car.getCarID() + " ƒë·ªÉ c·∫≠p nh·∫≠t.");
                }
            }

            // üü¢ 2. C·∫≠p nh·∫≠t t·ªìn kho (Stock)
            int affectedRows = 0;
            try (PreparedStatement stockPs = con.prepareStatement(stockQuery)) {
                stockPs.setInt(1, quantity);
                stockPs.setInt(2, car.getCarID());
                affectedRows = stockPs.executeUpdate();
                System.out.println(">>> [DAO] C·∫≠p nh·∫≠t b·∫£ng carstock: " + affectedRows + " d√≤ng.");
            }

            if (affectedRows == 0) {
                // N·∫øu UPDATE kh√¥ng th√†nh c√¥ng (ch∆∞a c√≥ t·ªìn kho), th√¨ INSERT m·ªõi
                try (PreparedStatement insertPs = con.prepareStatement(insertStock)) {
                    insertPs.setInt(1, car.getBrandID());
                    insertPs.setInt(2, car.getCarID());
                    insertPs.setInt(3, quantity);
                    insertPs.executeUpdate();
                    System.out.println("‚ÑπÔ∏è [DAO] Ch∆∞a c√≥ t·ªìn kho ‚Üí ƒê√£ th√™m m·ªõi stock cho CarID=" + car.getCarID());
                }
            }

            // üü¢ 3. S·ª¨A L·ªñI 2: C·∫≠p nh·∫≠t ho·∫∑c Th√™m m·ªõi ·∫£nh ch√≠nh
            if (car.getMainImageURL() != null && !car.getMainImageURL().isEmpty()) {
                String imgName = car.getMainImageURL();
                if (imgName.startsWith("uploads/")) {
                    imgName = imgName.substring("uploads/".length());
                }

                try (PreparedStatement imgPs = con.prepareStatement(imageMainQuery)) {
                    imgPs.setString(1, imgName);
                    imgPs.setInt(2, car.getCarID());
                    int imgRows = imgPs.executeUpdate();

                    if (imgRows == 0) {
                        try (PreparedStatement insertPs = con.prepareStatement(insertMainImage)) {
                            insertPs.setInt(1, car.getCarID());
                            insertPs.setString(2, imgName);
                            insertPs.executeUpdate();
                        }
                    }
                }
            }

            // üü¢ 4. ·∫¢nh m√¥ t·∫£ (Thumbs)
            // üü¢ 4. ·∫¢nh m√¥ t·∫£ (Thumbs)
            if (car.getThumbs() != null) {
                try (PreparedStatement delPs = con.prepareStatement(deleteThumbsQuery)) {
                    delPs.setInt(1, car.getCarID());
                    delPs.executeUpdate();
                }

                if (!car.getThumbs().isEmpty()) {
                    try (PreparedStatement insPs = con.prepareStatement(insertThumbQuery)) {
                        for (String thumb : car.getThumbs()) {
                            if (thumb.startsWith("uploads/")) {
                                thumb = thumb.substring("uploads/".length());
                            }
                            insPs.setInt(1, car.getCarID());
                            insPs.setString(2, thumb);
                            insPs.addBatch();
                        }
                        insPs.executeBatch();
                    }
                }
            }

            con.commit();
            System.out.println("‚úÖ [DAO] Update th√†nh c√¥ng CarID=" + car.getCarID());
            return true;

        } catch (Exception e) {
            // L·ªói ·ªü ƒë√¢y s·∫Ω in ra chi ti·∫øt SQLException, gi√∫p b·∫°n debug ch√≠nh x√°c h∆°n
            e.printStackTrace();
            if (con != null) try {
                con.rollback();
            } catch (Exception ignore) {
            }
            System.out.println("‚ùå [DAO] Update th·∫•t b·∫°i: " + e.getMessage());
            return false;
        } finally {
            if (con != null) try {
                con.setAutoCommit(true); // Quan tr·ªçng: ƒê∆∞a v·ªÅ tr·∫°ng th√°i AutoCommit ban ƒë·∫ßu
                con.close();
            } catch (Exception ignore) {
            }
        }
    }

    public boolean updateCarImage(int carId, String imageURL) {
        String sql = "UPDATE carimage SET ImageURL = ? WHERE CarID = ? AND IsMain = 1";
        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, imageURL);
            ps.setInt(2, carId);
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    // Th√™m v√†o l·ªõp dao.CarDAO.java

    public boolean deleteCar(int carID) {
        System.out.println(">>> [DAO] Chu·∫©n b·ªã x√≥a xe CarID=" + carID);

        // X√≥a t·∫•t c·∫£ b·∫£n ghi li√™n quan tr∆∞·ªõc khi x√≥a b·∫£n ghi ch√≠nh
        String deleteImageQuery = "DELETE FROM carimage WHERE CarID=?";
        String deleteStockQuery = "DELETE FROM carstock WHERE CarID=?";
        String deleteCarQuery = "DELETE FROM car WHERE CarID=?";

        // Query ki·ªÉm tra s·ª± t·ªìn t·∫°i trong orderdetail
        String checkOrderQuery = "SELECT 1 FROM orderdetail WHERE CarID=? LIMIT 1";

        Connection con = null;

        try {
            con = Connect.getCon();
            con.setAutoCommit(false); // B·∫Øt ƒë·∫ßu Transaction

            // 0. Ki·ªÉm tra OrderDetail (N·∫øu c√≥, kh√¥ng ƒë∆∞·ª£c x√≥a)
            try (PreparedStatement checkPs = con.prepareStatement(checkOrderQuery)) {
                checkPs.setInt(1, carID);
                try (ResultSet rs = checkPs.executeQuery()) {
                    if (rs.next()) {
                        // N·∫øu xe ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t h√†ng, KH√îNG x√≥a
                        System.err.println("‚ùå [DAO] X√≥a th·∫•t b·∫°i: CarID=" + carID + " ƒë√£ c√≥ trong OrderDetail.");
                        con.rollback();
                        return false;
                    }
                }
            }

            // 1. X√≥a trong carimage
            try (PreparedStatement imagePs = con.prepareStatement(deleteImageQuery)) {
                imagePs.setInt(1, carID);
                int rows = imagePs.executeUpdate();
                System.out.println(">>> [DAO] ƒê√£ x√≥a " + rows + " ·∫£nh li√™n quan.");
            }

            // 2. X√≥a trong carstock
            try (PreparedStatement stockPs = con.prepareStatement(deleteStockQuery)) {
                stockPs.setInt(1, carID);
                int rows = stockPs.executeUpdate();
                System.out.println(">>> [DAO] ƒê√£ x√≥a " + rows + " t·ªìn kho li√™n quan.");
            }

            // 3. X√≥a trong car (B·∫£n ghi ch√≠nh)
            int carRows;
            try (PreparedStatement carPs = con.prepareStatement(deleteCarQuery)) {
                carPs.setInt(1, carID);
                carRows = carPs.executeUpdate();
                System.out.println(">>> [DAO] ƒê√£ x√≥a " + carRows + " b·∫£n ghi ch√≠nh.");
            }

            if (carRows > 0) {
                con.commit(); // Ho√†n t·∫•t Transaction
                System.out.println("‚úÖ [DAO] X√≥a c·ª©ng th√†nh c√¥ng CarID=" + carID);
                return true;
            } else {
                con.rollback(); // N·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c b·∫£n ghi ch√≠nh (CarID kh√¥ng t·ªìn t·∫°i)
                System.err.println("‚ùå [DAO] X√≥a th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y CarID=" + carID + ".");
                return false;
            }

        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi x√≥a xe. Ti·∫øn h√†nh Rollback.", e);
            if (con != null) {
                try {
                    con.rollback(); // Ho√†n t√°c n·∫øu c√≥ l·ªói SQL
                } catch (SQLException rbEx) {
                    LOGGER.log(Level.SEVERE, "L·ªói khi rollback.", rbEx);
                }
            }
            return false;
        } finally {
            if (con != null) {
                try {
                    con.setAutoCommit(true);
                    con.close();
                } catch (SQLException closeEx) {
                    LOGGER.log(Level.SEVERE, "L·ªói khi ƒë√≥ng k·∫øt n·ªëi.", closeEx);
                }
            }
        }
    }

    public List<Brand> getAllBrands() {
        List<Brand> brands = new ArrayList<>();
        // Gi·∫£ ƒë·ªãnh t√™n b·∫£ng l√† 'brand' v√† c√≥ c√°c c·ªôt BrandID, BrandName, LogoURL
        String sql = "SELECT BrandID, BrandName, LogoURL FROM brand ORDER BY BrandName";

        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                Brand brand = new Brand();
                brand.setBrandID(rs.getInt("BrandID"));
                brand.setBrandName(rs.getString("BrandName"));
                brand.setLogoURL(rs.getString("LogoURL")); // Gi·∫£ ƒë·ªãnh t√™n c·ªôt l√† LogoURL
                brands.add(brand);
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi l·∫•y danh s√°ch h√£ng xe.", e);
        }
        return brands;
    }

    public Map<Brand, List<Car>> getCarsGroupedByBrand() {
        // LinkedHashMap ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± c√°c h√£ng xe ƒë∆∞·ª£c gi·ªØ nguy√™n (n·∫øu c·∫ßn)
        Map<Brand, List<Car>> groupedCars = new LinkedHashMap<>();

        // Query k·∫øt h·ª£p 3 b·∫£ng: car, carimage (ƒë·ªÉ l·∫•y ·∫£nh ch√≠nh), v√† brand
        String sql = "SELECT b.BrandID, b.BrandName, b.LogoURL, "
                + "c.CarID, c.CarName, c.Price, "
                + "ci.ImageURL AS MainImageURL "
                + "FROM car c "
                + "JOIN brand b ON c.BrandID = b.BrandID "
                + "LEFT JOIN carimage ci ON c.CarID = ci.CarID AND ci.IsMain = 1 "
                + "WHERE c.Status = 'Available' " // Ch·ªâ l·∫•y xe ƒëang b√°n
                + "ORDER BY b.BrandName, c.CarName";

        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                // L·∫•y th√¥ng tin Brand
                int brandID = rs.getInt("BrandID");
                String brandName = rs.getString("BrandName");
                String logoURL = rs.getString("LogoURL");
                Brand brand = new Brand(brandID, brandName, logoURL);

                // L·∫•y th√¥ng tin Car
                Car car = new Car();
                car.setCarID(rs.getInt("CarID"));
                car.setCarName(rs.getString("CarName"));
                car.setBrandID(brandID);
                car.setPrice(rs.getBigDecimal("Price"));
                car.setMainImageURL(rs.getString("MainImageURL")); // L·∫•y t·ª´ JOIN

                // T√¨m Brand trong Map, n·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi. Sau ƒë√≥ th√™m Car v√†o List.
                // D√πng Brand ID/t√™n l√†m key s·∫Ω ti·ªán h∆°n, nh∆∞ng d√πng object Brand l√†m key ƒë·ªÉ l·∫•y LogoURL ti·ªán h∆°n.
                // ƒê·ªÉ ƒë·∫£m b·∫£o Brand object l√† duy nh·∫•t (v√¨ BrandID l√† kh√≥a ch√≠nh), ta c·∫ßn m·ªôt c√°ch so s√°nh (equals/hashCode)
                // T·ªëi ∆∞u h√≥a: Thay v√¨ d√πng object Brand l√†m Key, ta c√≥ th·ªÉ d√πng Brand Name (String) l√†m Key
                List<Car> carList = groupedCars.computeIfAbsent(brand, k -> new ArrayList<>());
                carList.add(car);
            }

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi l·∫•y danh s√°ch xe theo h√£ng.", e);
        }
        return groupedCars;
    }

    public List<String> getCarThumbs(int carID) {
        List<String> thumbs = new ArrayList<>();
        // L·∫•y t·∫•t c·∫£ ·∫£nh kh√¥ng ph·∫£i ·∫£nh ch√≠nh (IsMain = 0)
        String sql = "SELECT ImageURL FROM carimage WHERE CarID = ? AND IsMain = 0";

        try (Connection con = Connect.getCon(); PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, carID);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String img = rs.getString("ImageURL");
                    if (img != null && !img.startsWith("uploads/")) {
                        img = img;
                    }
                    thumbs.add(img);
                }
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "L·ªói khi l·∫•y ·∫£nh ph·ª• cho CarID: " + carID, e);
        }
        return thumbs;
    }

}
